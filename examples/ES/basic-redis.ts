/**
 * üß© Ejemplo‚ÄØ2: Uso b√°sico y progresivo de CacheDash con Redis
 * -------------------------------------------------------------------------
 * Este archivo ense√±a c√≥mo integrar CacheDash con un servidor‚ÄØRedis,
 * usando variables de entorno para que el c√≥digo funcione igual en
 * desarrollo local, contenedores, staging o producci√≥n.
 *
 * Variables de entorno admitidas (prioridad):
 *  1. REDIS_URL  ‚Üí URL completa (p.‚ÄØej. redis://user:pass@my‚Äëhost:6379/0)
 *  2. REDIS_HOST ‚Üí Host (por defecto "127.0.0.1")
 *     REDIS_PORT ‚Üí Puerto (por defecto "6379")
 *
 * Incluye:
 *   ‚úÖ set() / get() con TTL por defecto y personalizado
 *   ‚úÖ hasKey(), del(), flush()
 *   ‚úÖ getStats() y getKeyStats()
 */

import { CacheServiceCreate } from '../src';

// Construir la URL de conexi√≥n a Redis de forma flexible
const redisUrl =
  process.env.REDIS_URL ||                               // 1¬∫: URL completa
  `redis://${process.env.REDIS_HOST || '127.0.0.1'}:` +  // 2¬∫: host + port
  `${process.env.REDIS_PORT || 6379}`;

// Crear instancia CacheDash con Redis
const cache = CacheServiceCreate.create({
  cacheType        : 'redis',
  redisOptions     : redisUrl,
  defaultTTL       : 20,              // TTL por defecto de 20‚ÄØs
  serviceIdentifier: 'EXAMPLE_REDIS_2',
  enableMonitoring : true
});

async function main(): Promise<void> {
  // üìù Guardar valores con TTL impl√≠cito y expl√≠cito
  await cache.set('redis:foo', 'bar');
  await cache.set('redis:number', 100);
  await cache.set('redis:ephemeral', 'temp', 5);   // TTL corto

  // üì• Leer los valores
  console.log('[get] redis:foo:',     await cache.get('redis:foo'));
  console.log('[get] redis:number:',  await cache.get('redis:number'));

  // ‚è± Comprobar expiraci√≥n de TTL corto
  console.log('[get] redis:ephemeral (antes):', await cache.get('redis:ephemeral'));
  await new Promise(r => setTimeout(r, 6000));
  console.log('[get] redis:ephemeral (despu√©s):', await cache.get('redis:ephemeral'));

  // üîç Verificar existencia con hasKey()
  console.log('[hasKey] redis:number?',    await cache.hasKey('redis:number'));
  console.log('[hasKey] redis:ephemeral?', await cache.hasKey('redis:ephemeral'));

  // üßπ Borrar una clave y verificar
  await cache.del('redis:number');
  console.log('[get] redis:number (tras del):', await cache.get('redis:number'));

  // üßº flush(): eliminar toda la cach√© del servicio
  await cache.flush();
  console.log('[get] redis:foo (tras flush):', await cache.get('redis:foo'));

  // üìä Ver estad√≠sticas globales y por clave
  console.log('\n[Stats Globales]:', cache.getStats());
  const keyStats = cache.getKeyStats();
  if (keyStats) {
    console.log('\n[Stats por clave]:');
    for (const [key, stats] of keyStats.entries()) {
      console.log(` - ${key}:`, stats);
    }
  }
}

main().catch(console.error);
