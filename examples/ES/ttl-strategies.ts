/**
 * üß© Ejemplo‚ÄØ5: Estrategias de TTL e invalidaci√≥n con CacheDash
 * ============================================================
 * Objetivo:
 *   ‚Ä¢ Asignar TTL diferente seg√∫n la naturaleza del dato
 *   ‚Ä¢ Renovar datos ‚Äúcr√≠ticos‚Äù sin reiniciar todo
 *   ‚Ä¢ Decidir entre  del()  y  flush()  en situaciones reales
 *   ‚Ä¢ Medir impacto en las estad√≠sticas
 *
 * API usada:
 *   get() ¬∑ set() ¬∑ del() ¬∑ flush() ¬∑ getStats() ¬∑ hasKey()
 */

import { CacheServiceCreate } from '../src';

// Instancia LOCAL con TTL global *corto* (fallback)
const cache = CacheServiceCreate.create({
  cacheType        : 'local',
  defaultTTL       : 10,     // fallback de 10‚ÄØs
  serviceIdentifier: 'EXAMPLE_TTL_5',
  enableMonitoring : false
});

/* Utilidades de ayuda ‚Äîsolo para este ejemplo */
const sleep = (ms: number) => new Promise(r => setTimeout(r, ms));

async function main() {
  /* -----------------------------------------------------------------
   * 1. Guardamos tres tipos de datos con TTLs distintos
   * ----------------------------------------------------------------- */

  // A) Configuraci√≥n que casi nunca cambia ‚Üí TTL largo (1h)
  await cache.set('cfg:site', { theme: 'dark', ver: '1.1' }, 3600);

  // B) Datos de usuario en sesi√≥n ‚Üí TTL medio (15‚ÄØmin)
  await cache.set('session:user:42', { lastActive: Date.now() }, 900);

  // C) Resultado de b√∫squeda muy din√°mico ‚Üí TTL muy corto (30‚ÄØs)
  await cache.set('search:q=shoes', ['shoe‚Äë1', 'shoe‚Äë2'], 30);

  console.log('\n‚è≥ Datos almacenados con TTLs personalizados.');
  console.log(cache.getStats());

  /* -----------------------------------------------------------------
   * 2. Simulamos paso del tiempo y renovamos s√≥lo lo necesario
   * ----------------------------------------------------------------- */
  console.log('\n‚Ä¶esperando 35‚ÄØs para que expire la b√∫squeda‚Ä¶');
  await sleep(35_000);

  // Verificamos qu√© sigue vivo
  console.log('cfg viva?',      await cache.hasKey('cfg:site'));        // true
  console.log('session viva?',  await cache.hasKey('session:user:42')); // true
  console.log('search viva?',   await cache.hasKey('search:q=shoes'));  // false

  // Renovamos s√≥lo la b√∫squeda (no toca flush global)
  await cache.set('search:q=shoes', ['shoe‚Äë3', 'shoe‚Äë4'], 30);
  console.log('üîÑ B√∫squeda renovada.\n');

  /* -----------------------------------------------------------------
   * 3. Cambia la versi√≥n del sitio ‚Üí invalidamos la configuraci√≥n
   * ----------------------------------------------------------------- */
  await cache.del('cfg:site');                               // del() puntual
  await cache.set('cfg:site', { theme: 'light', ver: '1.2' }, 3600);
  console.log('‚öôÔ∏è  Config actualizada.\n');

  /* -----------------------------------------------------------------
   * 4. Mantenimiento programado ‚Üí flush() total
   * ----------------------------------------------------------------- */
  console.log('üßπ  Realizamos flush() global por mantenimiento‚Ä¶');
  await cache.flush();

  console.log('\nüìä  Stats despu√©s de flush():', cache.getStats());
  console.log('cfg existe?',      await cache.hasKey('cfg:site'));
  console.log('session existe?',  await cache.hasKey('session:user:42'));
  console.log('search existe?',   await cache.hasKey('search:q=shoes'));
}

main().catch(console.error);
