/**
 * üìö Ejemplo¬†1¬†(ES)
 * =================
 * Demuestra TODAS las operaciones b√°sicas de la API p√∫blica de CacheDash
 * cuando se trabaja con cach√© en memoria (`cacheType: 'local'`).
 *
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * Escenario imaginado:
 *   ‚Ä¢ Necesitas cachear valores simples (string, number, objetos peque√±os).
 *   ‚Ä¢ Quieres TTL por defecto (10‚ÄØs) y TTL espec√≠fico para algunas claves.
 *   ‚Ä¢ Necesitas saber si una clave existe sin leerla (‚ÄúhasKey‚Äù).
 *   ‚Ä¢ Debes invalidar claves (del) o limpiar todo (flush) bajo demanda.
 *   ‚Ä¢ Deseas consultar m√©tricas globales y por clave para debugging.
 *
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * ‚ú®¬†Pasos ilustrados en este archivo
 *   1) Crear una instancia LOCAL con TTL global.
 *   2) Guardar claves con y sin TTL personalizado.
 *   3) Leer valores y observar la expiraci√≥n autom√°tica.
 *   4) Verificar existencia con hasKey().
 *   5) Invalidar con del() y flush().
 *   6) Obtener estad√≠sticas globales y por clave.
 * 
 * Nota:  Este archivo NO est√° pensado para ejecutarse tal cual.
 *        Copia los fragmentos que necesites dentro de tu propia app
 *        (servicios, controladores, etc.) y adapta las claves/TTL.
 */

import { CacheServiceCreate } from '../../src';

/* 1Ô∏è‚É£  Crear instancia LOCAL */
const cache = CacheServiceCreate.create({
  cacheType        : 'local',     // backend en memoria
  defaultTTL       : 10,          // TTL global (segundos)
  serviceIdentifier: 'EXAMPLE_LOCAL_1',
  enableMonitoring : false        // pon true si luego activas el dashboard
});

(async () => {

/* 2Ô∏è‚É£  set(): guardar valores */
await cache.set('foo', 'bar');        // TTL = 10‚ÄØs (global)
await cache.set('count', 123);        // TTL = 10‚ÄØs
await cache.set('token', 'abc123', 5); // TTL espec√≠fico de 5‚ÄØs

/* 3Ô∏è‚É£  get(): leer valores (antes/despu√©s de expirar) */
const foo1 = await cache.get('foo');   // 'bar'
const tok1 = await cache.get('token'); // 'abc123'
// ‚Ä¶ espera 6‚ÄØs y repite ‚Ä¶
const tok2 = await cache.get('token'); // undefined (expir√≥)

/* 4Ô∏è‚É£  hasKey(): comprobar existencia sin leer */
const fooExists  = await cache.hasKey('foo');   // true
const tokenAlive = await cache.hasKey('token'); // false

/* 5Ô∏è‚É£  del() y flush() */
await cache.del('foo');   // invalida solo 'foo'
await cache.flush();      // vac√≠a toda la cach√©

/* 6Ô∏è‚É£  M√©tricas */
const globalStats = cache.getStats();   // hits, misses, keys, size, ‚Ä¶
const perKeyStats = cache.getKeyStats(); // Map<key, KeyStats>

})();