/****************************************************************************************
 * ðŸ“š Exampleâ€¯8Â (EN) â€“ Concurrencyâ€‘Safe Pattern (Doubleâ€‘Check + Inâ€‘Flight Map)
 * ======================================================================================
 * Reference snippet â€” not intended to be run asâ€‘is.  Shows how to protect an
 * expensive resource from concurrent requests using CacheDash only.
 *
 * âœ¨Â Problem
 *   â€¢ Several concurrent requests ask for the same heavy computation.
 *   â€¢ If the key is missing, each request would trigger the job â‡’ dogâ€‘pile.
 *
 * ðŸ› Â Solution
 *   1)  Check cache first.
 *   2)  If absent, store a Promise in an **inâ€‘flight map**.
 *   3)  Later requests await that very Promise.
 *   4)  When resolved, store in CacheDash and drop the map entry.
 *
 *   API used:  get() Â· set() Â· hasKey() Â· getStats()
 ****************************************************************************************/

import { CacheServiceCreate } from '../../src';

/* LOCAL cache instance with 15â€‘second TTL */
const cache = CacheServiceCreate.create({
  cacheType        : 'local',
  defaultTTL       : 15,
  serviceIdentifier: 'EXAMPLE_CONC_8',
  enableMonitoring : false
});

/* Inâ€‘flight map  (key â†’ Promise) */
const inFlight = new Map<string, Promise<any>>();

/* Concurrencyâ€‘safe helper */
async function getOrLoad<T>(
  key: string,
  loader: () => Promise<T> | T,
  ttl = 15
): Promise<T> {
  /* 1st check: cache */
  const cached = await cache.get<T>(key);
  if (cached !== undefined) return cached;

  /* 2nd check: inâ€‘flight promise */
  if (inFlight.has(key)) return inFlight.get(key)!;

  /* Launch loader and register the promise */
  const promise = Promise.resolve(loader())
    .then(async res => {
      await cache.set(key, res, ttl); // Persist in CacheDash
      return res;
    })
    .finally(() => inFlight.delete(key));

  inFlight.set(key, promise);
  return promise;
}

/* Usage illustration (5 concurrent requests) */
(async () => {
  const KEY = 'heavy:99';

  const expensiveOp = async (id: number) => {
    // â€¦real heavy logic: DB, ML, renderingâ€¦
    await new Promise(r => setTimeout(r, 300));
    return `VALUE_${id}_${Date.now()}`;
  };

  const concurrent = Array.from({ length: 5 }, () =>
    getOrLoad(KEY, () => expensiveOp(99))
  );

  const results = await Promise.all(concurrent);
  // â†’ all 5 results identical; expensiveOp executed only once

  const stats = cache.getStats(); // hits should be 4, misses 1
})();
